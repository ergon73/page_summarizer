"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ProxyAPI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞.
"""

import os
import time
import logging
from typing import Optional
from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class OpenAIModule:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ProxyAPI OpenAI."""
    
    def __init__(self, api_key: Optional[str] = None, base_url: str = "https://api.proxyapi.ru/openai/v1", model: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI.
        
        Args:
            api_key: API –∫–ª—é—á –¥–ª—è ProxyAPI (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
            base_url: –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è ProxyAPI
            model: –ú–æ–¥–µ–ª—å AI –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        """
        self.api_key = api_key or os.getenv("PROXYAPI_KEY")
        if not self.api_key:
            raise ValueError("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PROXYAPI_KEY –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ api_key")
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏
        self.supported_models = ["gpt-4o", "gpt-3.5-turbo"]
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        self.model = model or os.getenv("AI_MODEL", "gpt-4o")
        if self.model not in self.supported_models:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –º–æ–¥–µ–ª—å: {self.model}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(self.supported_models)}")
        
        self.client = OpenAI(
            api_key=self.api_key,
            base_url=base_url
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        self.max_retries = 3
        self.retry_delay = 1  # —Å–µ–∫—É–Ω–¥—ã
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
        self.max_text_length = int(os.getenv("MAX_TEXT_LENGTH", "16000"))
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
        self.system_prompt = """–¢—ã ‚Äî AI-–∞–Ω–∞–ª–∏—Ç–∏–∫, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ, —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ.

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—ë –≥–ª–∞–≤–Ω—ã–µ –∏–¥–µ–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã.
2. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–∞–º–æ–π –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –Ω–∞–≤–∏–≥–∞—Ü–∏—é, —Ä–µ–∫–ª–∞–º—É –∏ "–≤–æ–¥—É".
3. –°—Ñ–æ—Ä–º–∏—Ä—É–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –µ–¥–∏–Ω—ã–π –∞–±–∑–∞—Ü —Ç–µ–∫—Å—Ç–∞.

–°—Ç—Ä–æ–≥–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:
- –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: –†–µ–∑—é–º–µ –¥–æ–ª–∂–Ω–æ —Ç–æ—á–Ω–æ –æ—Ç—Ä–∞–∂–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –º—ã—Å–ª–∏ –∏ —Å—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
- –û–±—ä–µ–º: 1-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:
  * –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–∞–ª–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) - –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  * –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–Ω–æ–≥–æ - –∏—Å–ø–æ–ª—å–∑—É–π 3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞
- –§–æ—Ä–º–∞—Ç: –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ. –ù–∏–∫–∞–∫–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –≤—Ä–æ–¥–µ ¬´–í–æ—Ç –≤–∞—à–µ —Ä–µ–∑—é–º–µ:¬ª –∏–ª–∏ ¬´–ö–æ–Ω–µ—á–Ω–æ, –≤–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ:¬ª.
- –í–∞–∂–Ω–æ: –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ!"""

    def get_summary(self, text: str, model: Optional[str] = None) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é ProxyAPI.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å –∏–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
            
        Returns:
            –†–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞ –≤ 3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö
            
        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ API –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        model_to_use = model or self.model
        if model_to_use not in self.supported_models:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –º–æ–¥–µ–ª—å: {model_to_use}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(self.supported_models)}")
        if not text.strip():
            raise ValueError("–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        original_length = len(text)
        if original_length > self.max_text_length:
            # –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
            half_length = self.max_text_length // 2
            text = text[:half_length] + "\n\n[–¢–ï–ö–°–¢ –û–ë–†–ï–ó–ê–ù –î–õ–Ø –≠–ö–û–ù–û–ú–ò–ò –¢–û–ö–ï–ù–û–í]\n\n" + text[-half_length:]
            
            logger.warning(f"‚ö†Ô∏è –¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω —Å {original_length:,} –¥–æ {self.max_text_length:,} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"üìù –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {self.max_text_length:,} —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ .env –∫–∞–∫ MAX_TEXT_LENGTH)")
            logger.info(f"üí° –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–ª–∏—á—å—Ç–µ MAX_TEXT_LENGTH –≤ —Ñ–∞–π–ª–µ .env")
        else:
            logger.info(f"üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {original_length:,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        for attempt in range(self.max_retries):
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries} –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—é–º–µ")
                
                response = self.client.chat.completions.create(
                    model=model_to_use,
                    messages=[
                        {
                            "role": "system",
                            "content": self.system_prompt
                        },
                        {
                            "role": "user",
                            "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:\n\n{text}"
                        }
                    ],
                    max_tokens=300,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
                    temperature=0.3  # –î–µ–ª–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ–ª–µ–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
                )
                
                summary = response.choices[0].message.content.strip()
                
                if not summary:
                    raise ValueError("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                
                logger.info("–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ")
                return summary
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {str(e)}")
                
                if attempt == self.max_retries - 1:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}")
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                time.sleep(self.retry_delay * (attempt + 1))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        # –≠—Ç–æ—Ç –∫–æ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        raise Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫")

    def validate_summary(self, summary: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–∑—é–º–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.
        
        Args:
            summary: –¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —Ä–µ–∑—é–º–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, False –∏–Ω–∞—á–µ
        """
        if not summary or not summary.strip():
            return False
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
        sentences = [s.strip() for s in summary.split('.') if s.strip()]
        sentence_count = len(sentences)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (1-5)
        if sentence_count < 1 or sentence_count > 5:
            logger.warning(f"–†–µ–∑—é–º–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {sentence_count} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –æ–∂–∏–¥–∞–µ—Ç—Å—è 1-5")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–º)
        if len(summary) < 100 or len(summary) > 1000:
            logger.warning(f"–†–µ–∑—é–º–µ –∏–º–µ–µ—Ç –¥–ª–∏–Ω—É {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ")
        
        return True